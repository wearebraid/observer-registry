function ObserverRegistry(){this.observers=new Map,this.registry=new Map,this.visible=new Set}ObserverRegistry.prototype.getObserver=function(e,t,r){var i=(this.observers.has(e)?this.observers:this.observers.set(e,new Map)).get(e),s=(i.has(t)?i:i.set(t,new Map)).get(t);return s.has(r)||s.set(r,new IntersectionObserver(this.triggered.bind(this),{root:e,rootMargin:t,threshold:r})),s.get(r)},ObserverRegistry.prototype.triggered=function(e){this.visible.clear(),this.updateVisibility(e).notify()},ObserverRegistry.prototype.updateVisibility=function(e){var r=this;return e.forEach(function(e){if(r.registry.has(e.target)){var t=r.registry.get(e.target);r.merge(t,{visibility:e.isIntersecting,previousVisibility:t.visibility,entry:e}),r.visible.add(e.target)}}),this},ObserverRegistry.prototype.notify=function(){var r=this;this.registry.forEach(function(e,t){e.visibility!==e.previousVisibility&&(e.callback(e.visibility),e.once&&r.removeElement(t))})},ObserverRegistry.prototype.addElement=function(e,t,r){var i=this;if(r=this.merge({root:null,rootMargin:"0px",threshold:0},r||{}),Array.isArray(e)||e instanceof NodeList)return e.forEach(function(e){i.addElement(e,t,r)}),this;if(!this.registry.has(e)){var s=this.getObserver(r.root,r.rootMargin,r.threshold);this.registry.set(e,this.merge(r,{callback:t,observer:s,visibility:!1,previousVisibility:!1})),s.observe(e)}return this},ObserverRegistry.prototype.removeElement=function(e){if(this.registry.has(e)){var t=this.registry.get(e),r=this.getObserver(t.root,t.rootMargin,t.threshold);this.visible.delete(e),this.registry.delete(e),r.unobserve(e)}},ObserverRegistry.prototype.merge=function(e){for(var t=1;t<arguments.length;t+=1)for(var r=arguments[t],i=Object.keys(r),s=0;s<i.length;s+=1)e[i[s]]=r[i[s]];return e},module.exports=ObserverRegistry;